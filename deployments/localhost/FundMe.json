{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71af9448ab17fe06431f02fedb67acacfc80f2f35714310320aac7e8d9622898",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1035759",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xaf204281d72b71d325805d73f81263dcd10aa1c30c2b6c101a262cd1437fbe34",
    "transactionHash": "0x71af9448ab17fe06431f02fedb67acacfc80f2f35714310320aac7e8d9622898",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1035759",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "bafc3180501eecf0edbafb0c350c5fb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Tang\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n * @author Eric Tang\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n        \\n    function withdraw() public onlyOwner {\\n\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    \\n    function cheaperWithdraw() public onlyOwner {\\n\\n        address[] memory tempFunder = s_funders;\\n\\n        for (uint256 funderIndex=0; funderIndex < tempFunder.length; funderIndex++){\\n            address funder = tempFunder[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n       \\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view  returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n\\n  \\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x2cd2641ea7a384982dfec552a0a61371f0c2515aca6743d7cf5700ff4f159da7\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        // Goerli ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        \\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x24b38949a2a58cc1048f153fd54f5050cde7c269bbe3576bb5005fa0ab9401be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012d8380380620012d883398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161115f62000179600039600081816101fd0152818161044c01526105d6015261115f6000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101765761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a97565b6101b3565b6040516100b49190610add565b60405180910390f35b3480156100c957600080fd5b506100d26101fb565b005b3480156100e057600080fd5b506100e961043b565b6040516100f69190610add565b60405180910390f35b34801561010b57600080fd5b50610114610448565b6040516101219190610b07565b60405180910390f35b34801561013657600080fd5b5061013f610470565b60405161014c9190610b81565b60405180910390f35b61015d61049a565b005b34801561016b57600080fd5b506101746105d4565b005b34801561018257600080fd5b5061019d60048036038101906101989190610bc8565b610878565b6040516101aa9190610b07565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610280576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561032b576000600182815481106102a6576102a5610bf5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032390610c53565b915050610283565b50600067ffffffffffffffff81111561034757610346610c9c565b5b6040519080825280602002602001820160405280156103755781602001602082028036833780820191505090505b506001908051906020019061038b92919061098d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b290610cfc565b60006040518083038185875af1925050503d80600081146103ef576040519150601f19603f3d011682016040523d82523d6000602084013e6103f4565b606091505b5050905080610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610d6e565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104d9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c090919063ffffffff16565b101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190610dda565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105689190610dfa565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106dd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610693575b5050505050905060005b815181101561076757600082828151811061070557610704610bf5565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075f90610c53565b9150506106e7565b50600067ffffffffffffffff81111561078357610782610c9c565b5b6040519080825280602002602001820160405280156107b15781602001602082028036833780820191505090505b50600190805190602001906107c792919061098d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ee90610cfc565b60006040518083038185875af1925050503d806000811461082b576040519150601f19603f3d011682016040523d82523d6000602084013e610830565b606091505b5050905080610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90610d6e565b60405180910390fd5b5050565b60006001828154811061088e5761088d610bf5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108cc836108fc565b90506000670de0b6b3a764000085836108e59190610e50565b6108ef9190610ed9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190610f97565b5050509150506402540be400816109859190611012565b915050919050565b828054828255906000526020600020908101928215610a06579160200282015b82811115610a055782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ad565b5b509050610a139190610a17565b5090565b5b80821115610a30576000816000905550600101610a18565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6482610a39565b9050919050565b610a7481610a59565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b600060208284031215610aad57610aac610a34565b5b6000610abb84828501610a82565b91505092915050565b6000819050919050565b610ad781610ac4565b82525050565b6000602082019050610af26000830184610ace565b92915050565b610b0181610a59565b82525050565b6000602082019050610b1c6000830184610af8565b92915050565b6000819050919050565b6000610b47610b42610b3d84610a39565b610b22565b610a39565b9050919050565b6000610b5982610b2c565b9050919050565b6000610b6b82610b4e565b9050919050565b610b7b81610b60565b82525050565b6000602082019050610b966000830184610b72565b92915050565b610ba581610ac4565b8114610bb057600080fd5b50565b600081359050610bc281610b9c565b92915050565b600060208284031215610bde57610bdd610a34565b5b6000610bec84828501610bb3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5e82610ac4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c9157610c90610c24565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ce6600083610ccb565b9150610cf182610cd6565b600082019050919050565b6000610d0782610cd9565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d58600b83610d11565b9150610d6382610d22565b602082019050919050565b60006020820190508181036000830152610d8781610d4b565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dc4601b83610d11565b9150610dcf82610d8e565b602082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b6000610e0582610ac4565b9150610e1083610ac4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4557610e44610c24565b5b828201905092915050565b6000610e5b82610ac4565b9150610e6683610ac4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9f57610e9e610c24565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ee482610ac4565b9150610eef83610ac4565b925082610eff57610efe610eaa565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2981610f0a565b8114610f3457600080fd5b50565b600081519050610f4681610f20565b92915050565b6000819050919050565b610f5f81610f4c565b8114610f6a57600080fd5b50565b600081519050610f7c81610f56565b92915050565b600081519050610f9181610b9c565b92915050565b600080600080600060a08688031215610fb357610fb2610a34565b5b6000610fc188828901610f37565b9550506020610fd288828901610f6d565b9450506040610fe388828901610f82565b9350506060610ff488828901610f82565b925050608061100588828901610f37565b9150509295509295909350565b600061101d82610f4c565b915061102883610f4c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561106757611066610c24565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110a4576110a3610c24565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110e1576110e0610c24565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561111e5761111d610c24565b5b82820290509291505056fea2646970667358221220bce966483bdd13015d03780989b4d0756fdbd1ae395700e1f355d1f94bed9e0f64736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101765761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a97565b6101b3565b6040516100b49190610add565b60405180910390f35b3480156100c957600080fd5b506100d26101fb565b005b3480156100e057600080fd5b506100e961043b565b6040516100f69190610add565b60405180910390f35b34801561010b57600080fd5b50610114610448565b6040516101219190610b07565b60405180910390f35b34801561013657600080fd5b5061013f610470565b60405161014c9190610b81565b60405180910390f35b61015d61049a565b005b34801561016b57600080fd5b506101746105d4565b005b34801561018257600080fd5b5061019d60048036038101906101989190610bc8565b610878565b6040516101aa9190610b07565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610280576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561032b576000600182815481106102a6576102a5610bf5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032390610c53565b915050610283565b50600067ffffffffffffffff81111561034757610346610c9c565b5b6040519080825280602002602001820160405280156103755781602001602082028036833780820191505090505b506001908051906020019061038b92919061098d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b290610cfc565b60006040518083038185875af1925050503d80600081146103ef576040519150601f19603f3d011682016040523d82523d6000602084013e6103f4565b606091505b5050905080610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610d6e565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104d9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c090919063ffffffff16565b101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190610dda565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105689190610dfa565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106dd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610693575b5050505050905060005b815181101561076757600082828151811061070557610704610bf5565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075f90610c53565b9150506106e7565b50600067ffffffffffffffff81111561078357610782610c9c565b5b6040519080825280602002602001820160405280156107b15781602001602082028036833780820191505090505b50600190805190602001906107c792919061098d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ee90610cfc565b60006040518083038185875af1925050503d806000811461082b576040519150601f19603f3d011682016040523d82523d6000602084013e610830565b606091505b5050905080610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90610d6e565b60405180910390fd5b5050565b60006001828154811061088e5761088d610bf5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108cc836108fc565b90506000670de0b6b3a764000085836108e59190610e50565b6108ef9190610ed9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190610f97565b5050509150506402540be400816109859190611012565b915050919050565b828054828255906000526020600020908101928215610a06579160200282015b82811115610a055782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ad565b5b509050610a139190610a17565b5090565b5b80821115610a30576000816000905550600101610a18565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6482610a39565b9050919050565b610a7481610a59565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b600060208284031215610aad57610aac610a34565b5b6000610abb84828501610a82565b91505092915050565b6000819050919050565b610ad781610ac4565b82525050565b6000602082019050610af26000830184610ace565b92915050565b610b0181610a59565b82525050565b6000602082019050610b1c6000830184610af8565b92915050565b6000819050919050565b6000610b47610b42610b3d84610a39565b610b22565b610a39565b9050919050565b6000610b5982610b2c565b9050919050565b6000610b6b82610b4e565b9050919050565b610b7b81610b60565b82525050565b6000602082019050610b966000830184610b72565b92915050565b610ba581610ac4565b8114610bb057600080fd5b50565b600081359050610bc281610b9c565b92915050565b600060208284031215610bde57610bdd610a34565b5b6000610bec84828501610bb3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5e82610ac4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c9157610c90610c24565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ce6600083610ccb565b9150610cf182610cd6565b600082019050919050565b6000610d0782610cd9565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d58600b83610d11565b9150610d6382610d22565b602082019050919050565b60006020820190508181036000830152610d8781610d4b565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dc4601b83610d11565b9150610dcf82610d8e565b602082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b6000610e0582610ac4565b9150610e1083610ac4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4557610e44610c24565b5b828201905092915050565b6000610e5b82610ac4565b9150610e6683610ac4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e9f57610e9e610c24565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ee482610ac4565b9150610eef83610ac4565b925082610eff57610efe610eaa565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2981610f0a565b8114610f3457600080fd5b50565b600081519050610f4681610f20565b92915050565b6000819050919050565b610f5f81610f4c565b8114610f6a57600080fd5b50565b600081519050610f7c81610f56565b92915050565b600081519050610f9181610b9c565b92915050565b600080600080600060a08688031215610fb357610fb2610a34565b5b6000610fc188828901610f37565b9550506020610fd288828901610f6d565b9450506040610fe388828901610f82565b9350506060610ff488828901610f82565b925050608061100588828901610f37565b9150509295509295909350565b600061101d82610f4c565b915061102883610f4c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561106757611066610c24565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110a4576110a3610c24565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110e1576110e0610c24565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561111e5761111d610c24565b5b82820290509291505056fea2646970667358221220bce966483bdd13015d03780989b4d0756fdbd1ae395700e1f355d1f94bed9e0f64736f6c634300080c0033",
  "devdoc": {
    "author": "Eric Tang",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}